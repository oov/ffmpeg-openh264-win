name: builder

on:
  push:
    paths-ignore:
      - '**.md'
      - 'LICENSE'
  schedule:
    - cron:  '13 17 11 * *'

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  startup:
    runs-on: ubuntu-latest
    outputs:
      date: ${{ steps.startat.outputs.date }}
      openh264ver: ${{ steps.openh264.outputs.ver }}
      openh264hash: ${{ steps.openh264.outputs.hash }}
    steps:
      - name: Get the date
        id: startat
        run: |
          DATE=$(date "+%Y-%m-%d")
          echo "date=${DATE}" >> $GITHUB_OUTPUT
          echo "DATE: ${DATE}"
      - name: Get OpenH264 Release Version
        id: openh264
        run: |
          VER=$(wget https://api.github.com/repos/cisco/openh264/releases/latest -O - | jq -r ".tag_name" | awk '{ print substr($1,2) }')
          echo "ver=${VER}" >> $GITHUB_OUTPUT
          echo "VER: ${VER}"
          HASH=$(wget https://api.github.com/repos/cisco/openh264/git/ref/tags/v${VER} -O - | jq -r ".object.sha")
          echo "hash=${HASH}" >> $GITHUB_OUTPUT
          echo "HASH: ${HASH}"
  build:
    needs: [startup]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [win64, win32]
        variant: [lgpl-shared]
        version: [master, '4.4', '5.1', '6.1', '7.0']
    steps:
      - name: Install Latest Docker
        run: |
          # FFmpeg-Builds script uses OCI image format with the Docker save command, so it requires Docker 25 or later.
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu  $(lsb_release -cs)  stable"
          sudo apt-get update
          sudo apt-get install docker-ce
          sudo apt-get clean
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build Image
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          OPENH264PRECOMPILED="${{ needs.startup.outputs.openh264ver }}" OPENH264HASH="${{ needs.startup.outputs.openh264hash }}" bash do.bash
          VER=${{ matrix.version }}
          if [ "$VER" == "master" ]; then
            VER=""
          fi
          cd FFmpeg-Builds
          unset GITHUB_ACTIONS
          unset GITHUB_REPOSITORY
          docker version
          NOCLEAN=1 bash ./makeimage.sh ${{ matrix.target }} ${{ matrix.variant }} $VER || echo "Failed"
          (echo "cache info" && ls -la .cache/images/)
      - name: Build ffmpeg
        run: |
          cd FFmpeg-Builds
          unset GITHUB_ACTIONS
          unset GITHUB_REPOSITORY
          VER=${{ matrix.version }}
          if [ "$VER" == "master" ]; then
            VER=""
          fi
          bash ./build.sh ${{ matrix.target }} ${{ matrix.variant }} $VER
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: artifact-${{ matrix.target }}-${{ matrix.variant }}-${{ matrix.version }}
          path: FFmpeg-Builds/artifacts/*
  create-release:
    needs: [startup, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Merge artifacts
        run: |
          mkdir -p ffmpeg
          mv artifact-*/* ffmpeg/
      - name: Create release
        run: |
          TAG="rel.${{ needs.startup.outputs.date }}"
          OPENH264VER="${{ needs.startup.outputs.openh264ver }}"
          git tag "${TAG}"
          git push origin "${TAG}"
          
          ls -1 ffmpeg/ | sed 's/\(ffmpeg-\(.*\)-\(win\(32\|64\)\)\(-lgpl\)\?\(-shared\)\?\(-.*\)\?\.zip\)/\2|\3|\5|\6|\7|\1/g' | awk -F '|' '{ printf "%5s|%-16s|%-4s|%-5s|%s\n", substr($5,2), $2, toupper(substr($3, 2)), substr($4, 2), $6 }' | sort > /tmp/files.txt
          echo "[OpenH264 v${OPENH264VER}](https://github.com/cisco/openh264/releases/tag/v${OPENH264VER}) is required to use this release." > /tmp/notes.txt
          echo -e "\n### Windows 64bit\n" >> /tmp/notes.txt
          cat /tmp/files.txt | grep win64 | while IFS= read line
          do
            IFS='|' read ver platform license link filename <<< "$line"
            ver=$(echo "$ver" | tr -d ' ')
            if [[ $ver == "" ]]; then
              ver="latest"
            fi
            link=$(echo "$link" | tr -d ' ')
            if [[ $link == "" ]]; then
              ver="static"
            fi
            platform=$(echo "$platform" | tr -d ' ')
            license=$(echo "$license" | tr -d ' ')
            echo "- [ffmpeg-$ver, $license, $platform-$link](https://github.com/oov/ffmpeg-openh264-win/releases/download/${TAG}/$filename)" >> /tmp/notes.txt
          done
          echo -e "\n### Windows 32bit\n" >> /tmp/notes.txt
          cat /tmp/files.txt | grep win32 | while IFS= read line
          do
            IFS='|' read ver platform license link filename <<< "$line"
            ver=$(echo "$ver" | tr -d ' ')
            if [[ $ver == "" ]]; then
              ver="latest"
            fi
            link=$(echo "$link" | tr -d ' ')
            if [[ $link == "" ]]; then
              ver="static"
            fi
            platform=$(echo "$platform" | tr -d ' ')
            license=$(echo "$license" | tr -d ' ')
            echo "- [ffmpeg-$ver, $license, $platform-$link](https://github.com/oov/ffmpeg-openh264-win/releases/download/${TAG}/$filename)" >> /tmp/notes.txt
          done
          gh release create --title "Auto build ${{ needs.startup.outputs.date }}" --notes-file /tmp/notes.txt ${TAG} ffmpeg/*
